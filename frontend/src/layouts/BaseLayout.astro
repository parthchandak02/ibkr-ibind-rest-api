---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Secure Trading Interface with GitHub Actions" } = Astro.props;

// Import CSS directly in Astro component
import '../styles/design-system.css';
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <!-- Dark Mode Toggle -->
    <div class="theme-toggle">
      <button id="theme-toggle" aria-label="Toggle dark mode">
        <svg class="sun-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="12" cy="12" r="5"/>
          <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"/>
        </svg>
        <svg class="moon-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z"/>
        </svg>
      </button>
    </div>

    <!-- Main Content -->
    <main class="main-container">
      <slot />
    </main>

    <!-- Dark Mode Script -->
    <script>
      // Theme toggle functionality
      const themeToggle = document.getElementById('theme-toggle');
      const html = document.documentElement;
      
      // Check for saved theme or default to system preference
      const savedTheme = localStorage.getItem('theme');
      const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      
      if (savedTheme) {
        html.setAttribute('data-theme', savedTheme);
      } else if (systemPrefersDark) {
        html.setAttribute('data-theme', 'dark');
      }
      
      // Toggle theme
      themeToggle?.addEventListener('click', () => {
        const currentTheme = html.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        html.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
      });
      
      // Listen for system theme changes
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
        if (!localStorage.getItem('theme')) {
          html.setAttribute('data-theme', e.matches ? 'dark' : 'light');
        }
      });
    </script>
  </body>
</html>

<style>
  .theme-toggle {
    position: fixed;
    top: var(--spacing-lg);
    right: var(--spacing-lg);
    z-index: 50;
  }
  
  #theme-toggle {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border: 1px solid hsl(var(--border));
    border-radius: var(--radius);
    background: hsl(var(--card));
    color: hsl(var(--card-foreground));
    cursor: pointer;
    transition: all var(--transition-fast);
    box-shadow: var(--shadow-sm);
  }
  
  #theme-toggle:hover {
    background: hsl(var(--accent));
    box-shadow: var(--shadow-md);
  }
  
  #theme-toggle:focus-visible {
    outline: 2px solid hsl(var(--ring));
    outline-offset: 2px;
  }
  
  .sun-icon {
    display: block;
  }
  
  .moon-icon {
    display: none;
  }
  
  [data-theme="dark"] .sun-icon {
    display: none;
  }
  
  [data-theme="dark"] .moon-icon {
    display: block;
  }
  
  .main-container {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--spacing-lg);
    background: linear-gradient(
      135deg,
      hsl(var(--background)) 0%,
      hsl(var(--muted)) 100%
    );
  }
  
  @media (max-width: 768px) {
    .theme-toggle {
      top: var(--spacing-md);
      right: var(--spacing-md);
    }
    
    #theme-toggle {
      width: 36px;
      height: 36px;
    }
    
    .main-container {
      padding: var(--spacing-md);
    }
  }
</style> 