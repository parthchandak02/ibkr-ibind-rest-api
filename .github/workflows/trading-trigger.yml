name: Trading Trigger - AAPL Test Order

# This workflow can be triggered from GitHub Pages via repository_dispatch or manually
on:
  repository_dispatch:
    types: [trade_trigger]
  workflow_dispatch:  # Also allow manual triggering from GitHub UI
    inputs:
      symbol:
        description: 'Stock symbol to trade'
        required: true
        default: 'AAPL'
      action:
        description: 'Buy or Sell'
        required: true
        default: 'BUY'
        type: choice
        options:
        - BUY
        - SELL
      quantity:
        description: 'Number of shares'
        required: true
        default: '1'
      limit_price:
        description: 'Limit price'
        required: true
        default: '20.00'

# Global environment variables - define once, use everywhere
env:
  API_PORT: 8080

jobs:
  place_trade:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'  # Updated to Python 3.11 LTS
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Extract trade parameters
      id: trade_params
      run: |
        # Use inputs from workflow_dispatch or repository_dispatch payload
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "symbol=${{ github.event.inputs.symbol }}" >> $GITHUB_OUTPUT
          echo "action=${{ github.event.inputs.action }}" >> $GITHUB_OUTPUT
          echo "quantity=${{ github.event.inputs.quantity }}" >> $GITHUB_OUTPUT
          echo "limit_price=${{ github.event.inputs.limit_price }}" >> $GITHUB_OUTPUT
        else
          # repository_dispatch from GitHub Pages
          echo "symbol=${{ github.event.client_payload.symbol || 'AAPL' }}" >> $GITHUB_OUTPUT
          echo "action=${{ github.event.client_payload.action || 'BUY' }}" >> $GITHUB_OUTPUT
          echo "quantity=${{ github.event.client_payload.quantity || '1' }}" >> $GITHUB_OUTPUT
          echo "limit_price=${{ github.event.client_payload.limit_price || '20.00' }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Display trade details
      run: |
        echo "üöÄ Trading Trigger Activated!"
        echo "Symbol: ${{ steps.trade_params.outputs.symbol }}"
        echo "Action: ${{ steps.trade_params.outputs.action }}"
        echo "Quantity: ${{ steps.trade_params.outputs.quantity }}"
        echo "Limit Price: ${{ steps.trade_params.outputs.limit_price }}"
        echo "Triggered by: ${{ github.event_name }}"
        echo "Timestamp: $(date)"
        
    - name: Setup secure configuration
      run: |
        echo "üîê Setting up secure configuration from GitHub Secrets..."
        
        # Create OAuth files directory
        mkdir -p live_trading_oauth_files
        
        # Create OAuth files from GitHub Secrets (base64 encoded) - with error handling
        if [ -n "${{ secrets.ENCRYPTION_KEY_B64 }}" ]; then
          echo "${{ secrets.ENCRYPTION_KEY_B64 }}" | base64 -d > live_trading_oauth_files/private_encryption.pem || echo "‚ùå Failed to decode ENCRYPTION_KEY_B64"
        else
          echo "‚ö†Ô∏è ENCRYPTION_KEY_B64 secret not set"
        fi
        
        if [ -n "${{ secrets.SIGNATURE_KEY_B64 }}" ]; then
          echo "${{ secrets.SIGNATURE_KEY_B64 }}" | base64 -d > live_trading_oauth_files/private_signature.pem || echo "‚ùå Failed to decode SIGNATURE_KEY_B64"
        else
          echo "‚ö†Ô∏è SIGNATURE_KEY_B64 secret not set"
        fi
        
        # Set proper permissions if files exist
        if ls live_trading_oauth_files/*.pem 1> /dev/null 2>&1; then
          chmod 600 live_trading_oauth_files/*.pem
        fi
        
        # Create config.json from GitHub Secret
        if [ -n "${{ secrets.IBKR_OAUTH_CONFIG }}" ]; then
          echo "${{ secrets.IBKR_OAUTH_CONFIG }}" > config.json
        else
          echo "‚ö†Ô∏è IBKR_OAUTH_CONFIG secret not set"
          echo '{}' > config.json
        fi
        
        # Create API keys file for authentication
        echo '{"${{ secrets.API_KEY }}": {"name": "github_actions", "created": "'$(date)'"}}' > api_keys.json
        
        echo "‚úÖ Secure configuration setup complete"
        
    - name: Start Flask API Server
      run: |
        echo "üîß Starting Flask API server..."
        python run_server.py --port ${{ env.API_PORT }} &
        FLASK_PID=$!
        echo "Flask server started with PID: $FLASK_PID"
        echo "FLASK_PID=$FLASK_PID" >> $GITHUB_ENV
        
        # Wait for server to start
        echo "‚è≥ Waiting for Flask server to be ready..."
        for i in {1..30}; do
          if curl -f -H "X-API-Key: ${{ secrets.API_KEY }}" http://localhost:${{ env.API_PORT }}/health > /dev/null 2>&1; then
            echo "‚úÖ Flask server is ready!"
            break
          fi
          echo "Attempt $i/30: Flask server not ready yet..."
          sleep 2
        done
        
    - name: Place test order
      run: |
        echo "üìà Placing test order..."
        
        # First, resolve symbol to contract ID
        echo "üîç Resolving symbol to contract ID..."
        SYMBOL_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
          -X GET \
          -H "X-API-Key: ${{ secrets.API_KEY }}" \
          "http://localhost:${{ env.API_PORT }}/resolve/${{ steps.trade_params.outputs.symbol }}")
        
        SYMBOL_HTTP_STATUS=$(echo $SYMBOL_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
        SYMBOL_BODY=$(echo $SYMBOL_RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')
        
        if [ $SYMBOL_HTTP_STATUS -ne 200 ]; then
          echo "‚ùå Failed to resolve symbol: $SYMBOL_BODY"
          exit 1
        fi
        
        # Extract conid from response
        CONID=$(echo $SYMBOL_BODY | python3 -c "import sys,json; data=json.loads(sys.stdin.read()); print(data.get('conid',''))")
        
        if [ -z "$CONID" ]; then
          echo "‚ùå Could not extract contract ID from response"
          exit 1
        fi
        
        echo "‚úÖ Resolved ${{ steps.trade_params.outputs.symbol }} to contract ID: $CONID"
        
        # Prepare the secure order data
        ORDER_DATA='{
          "conid": "'$CONID'",
          "side": "${{ steps.trade_params.outputs.action }}",
          "quantity": ${{ steps.trade_params.outputs.quantity }},
          "order_type": "LMT",
          "price": ${{ steps.trade_params.outputs.limit_price }},
          "tif": "DAY"
        }'
        
        echo "Order data: $ORDER_DATA"
        
        # Place the order via secure API endpoint
        RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
          -X POST \
          -H "Content-Type: application/json" \
          -H "X-API-Key: ${{ secrets.API_KEY }}" \
          -d "$ORDER_DATA" \
          http://localhost:${{ env.API_PORT }}/order)
        
        # Extract HTTP status and body
        HTTP_STATUS=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
        HTTP_BODY=$(echo $RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')
        
        echo "HTTP Status: $HTTP_STATUS"
        echo "Response Body: $HTTP_BODY"
        
        # Check if request was successful
        if [ $HTTP_STATUS -eq 200 ]; then
          echo "‚úÖ Order placed successfully!"
          echo "Response: $HTTP_BODY"
          
          # Parse and display key information
          echo "üéØ Trade Summary:"
          echo "üìä Response Body: $HTTP_BODY"
        else
          echo "‚ùå Order failed with HTTP status: $HTTP_STATUS"
          echo "Error response: $HTTP_BODY"
          exit 1
        fi
        
    - name: Check server logs (if needed)
      if: failure()
      run: |
        echo "üîç Checking for any server logs..."
        # Kill Flask server gracefully
        if [ ! -z "$FLASK_PID" ]; then
          kill $FLASK_PID || true
        fi
        
    - name: Cleanup
      if: always()
      run: |
        echo "üßπ Cleaning up..."
        # Kill Flask server
        if [ ! -z "$FLASK_PID" ]; then
          kill $FLASK_PID || true
          echo "Flask server stopped"
        fi
        
        # Display final status
        echo "üèÅ Workflow completed!"
        echo "Triggered at: $(date)"
        echo "Repository: ${{ github.repository }}"
        echo "Event: ${{ github.event_name }}" 