name: 🚀 Comprehensive Trading Operations

on:
  workflow_dispatch:
    inputs:
      operation_type:
        description: 'Type of trading operation to execute'
        required: true
        type: choice
        options:
          - 'trading'
          - 'portfolio'
          - 'orders'
          - 'market_data'
          - 'account'
          - 'data_export'
      
      # Trading Operations
      trading_action:
        description: 'Trading action (for trading operations)'
        required: false
        type: choice
        default: 'rebalance'
        options:
          - 'rebalance'
          - 'buy'
          - 'sell'
          - 'market_order'
          - 'limit_order'
      
      symbol:
        description: 'Stock symbol (e.g., AAPL, TSLA)'
        required: false
        type: string
        default: 'AAPL'
      
      quantity:
        description: 'Number of shares or percentage (for rebalancing)'
        required: false
        type: string
        default: '1'
      
      price:
        description: 'Price for limit orders (optional)'
        required: false
        type: string
        default: ''
      
      # Portfolio & Account Operations  
      portfolio_action:
        description: 'Portfolio action (for portfolio operations)'
        required: false
        type: choice
        default: 'view'
        options:
          - 'view'
          - 'summary'
          - 'positions'
          - 'performance'
      
      # Order Management
      order_action:
        description: 'Order action (for order operations)'
        required: false
        type: choice
        default: 'view'
        options:
          - 'view'
          - 'cancel'
          - 'cancel_all'
          - 'cancel_duplicates'
          - 'history'
      
      order_id:
        description: 'Specific order ID (for cancel operations)'
        required: false
        type: string
        default: ''
      
      # Market Data Operations
      market_action:
        description: 'Market data action'
        required: false
        type: choice
        default: 'quote'
        options:
          - 'quote'
          - 'price'
          - 'history'
          - 'multiple_quotes'
      
      symbols_list:
        description: 'Multiple symbols (comma-separated: AAPL,TSLA,MSFT)'
        required: false
        type: string
        default: 'AAPL,TSLA'
      
      # Export Operations
      export_format:
        description: 'Export format (for data export)'
        required: false
        type: choice
        default: 'csv'
        options:
          - 'csv'
          - 'json'
          - 'xlsx'
      
      # Safety & Configuration
      dry_run:
        description: 'Dry run mode (safe testing)'
        required: true
        type: boolean
        default: true
      
      environment:
        description: 'Trading environment'
        required: true
        type: choice
        default: 'paper'
        options:
          - 'paper'
          - 'live'

  # Also support external API triggers  
  repository_dispatch:
    types: [comprehensive-trading]

jobs:
  # Input validation and routing
  validate-and-route:
    runs-on: ubuntu-latest
    outputs:
      operation: ${{ steps.route.outputs.operation }}
      endpoint: ${{ steps.route.outputs.endpoint }}
      payload: ${{ steps.route.outputs.payload }}
    
    steps:
      - name: 📋 Validate Inputs
        id: validate
        run: |
          echo "🔍 Validating operation: ${{ github.event.inputs.operation_type }}"
          echo "🎯 Symbol: ${{ github.event.inputs.symbol }}"
          echo "💰 Quantity: ${{ github.event.inputs.quantity }}"
          echo "🛡️ Dry Run: ${{ github.event.inputs.dry_run }}"
          echo "🌍 Environment: ${{ github.event.inputs.environment }}"
          
          # Validate required fields based on operation type
          if [[ "${{ github.event.inputs.operation_type }}" == "trading" ]]; then
            if [[ -z "${{ github.event.inputs.symbol }}" ]]; then
              echo "❌ Symbol is required for trading operations"
              exit 1
            fi
          fi
          
          echo "✅ Input validation passed"

      - name: 🗺️ Route Operation
        id: route
        run: |
          # Determine API endpoint and payload based on operation type
          case "${{ github.event.inputs.operation_type }}" in
            "trading")
              echo "endpoint=/api/trading/comprehensive" >> $GITHUB_OUTPUT
              ;;
            "portfolio")
              echo "endpoint=/api/portfolio/comprehensive" >> $GITHUB_OUTPUT
              ;;
            "orders")
              echo "endpoint=/api/orders/comprehensive" >> $GITHUB_OUTPUT
              ;;
            "market_data")
              echo "endpoint=/api/market-data/comprehensive" >> $GITHUB_OUTPUT
              ;;
            "account")
              echo "endpoint=/api/account/comprehensive" >> $GITHUB_OUTPUT
              ;;
            "data_export")
              echo "endpoint=/api/export/comprehensive" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "❌ Unknown operation type: ${{ github.event.inputs.operation_type }}"
              exit 1
              ;;
          esac
          
          echo "operation=${{ github.event.inputs.operation_type }}" >> $GITHUB_OUTPUT

  # Execute trading operations
  execute-trading:
    needs: validate-and-route
    if: github.event.inputs.operation_type == 'trading'
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔧 Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="$HOME/.cargo/bin:$PATH"
      
      - name: 📦 Install Dependencies
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          uv pip install --system requests
      
      - name: 📈 Execute Trading Operation
        env:
          TRADING_SERVER_URL: ${{ secrets.TRADING_SERVER_URL || 'https://your-trading-server.com' }}
          API_KEY: ${{ secrets.TRADING_API_KEY }}
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          
          # Construct comprehensive API payload
          cat > payload.json << EOF
          {
            "operation_type": "${{ github.event.inputs.operation_type }}",
            "action": "${{ github.event.inputs.trading_action }}",
            "symbol": "${{ github.event.inputs.symbol }}",
            "quantity": "${{ github.event.inputs.quantity }}",
            "price": "${{ github.event.inputs.price }}",
            "dry_run": ${{ github.event.inputs.dry_run }},
            "environment": "${{ github.event.inputs.environment }}",
            "triggered_by": "github_actions",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          }
          EOF
          
          echo "📤 Sending trading request..."
          cat payload.json
          
          # Make API call to comprehensive trading endpoint
          response=$(curl -s -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "X-API-Key: $API_KEY" \
            -d @payload.json \
            "$TRADING_SERVER_URL/api/comprehensive-execute")
          
          http_code="${response: -3}"
          response_body="${response%???}"
          
          echo "📊 Response Code: $http_code"
          echo "📋 Response Body: $response_body"
          
          if [[ "$http_code" -ge 200 && "$http_code" -lt 300 ]]; then
            echo "✅ Trading operation completed successfully"
            echo "📈 Result: $response_body"
          else
            echo "❌ Trading operation failed with code $http_code"
            echo "📋 Error: $response_body"
            exit 1
          fi

  # Execute portfolio operations
  execute-portfolio:
    needs: validate-and-route
    if: github.event.inputs.operation_type == 'portfolio'
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔧 Setup Environment
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="$HOME/.cargo/bin:$PATH"
          uv pip install --system requests
      
      - name: 📊 Execute Portfolio Operation
        env:
          TRADING_SERVER_URL: ${{ secrets.TRADING_SERVER_URL || 'https://your-trading-server.com' }}
          API_KEY: ${{ secrets.TRADING_API_KEY }}
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          
          # Portfolio operation payload
          cat > payload.json << EOF
          {
            "operation_type": "portfolio",
            "action": "${{ github.event.inputs.portfolio_action }}",
            "environment": "${{ github.event.inputs.environment }}",
            "format": "${{ github.event.inputs.export_format }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          }
          EOF
          
          echo "📤 Requesting portfolio data..."
          response=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "X-API-Key: $API_KEY" \
            -d @payload.json \
            "$TRADING_SERVER_URL/api/comprehensive-execute")
          
          echo "📊 Portfolio Response: $response"

  # Execute order operations
  execute-orders:
    needs: validate-and-route
    if: github.event.inputs.operation_type == 'orders'
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔧 Setup Environment
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="$HOME/.cargo/bin:$PATH"
          uv pip install --system requests
      
      - name: 📋 Execute Order Operation
        env:
          TRADING_SERVER_URL: ${{ secrets.TRADING_SERVER_URL || 'https://your-trading-server.com' }}
          API_KEY: ${{ secrets.TRADING_API_KEY }}
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          
          cat > payload.json << EOF
          {
            "operation_type": "orders",
            "action": "${{ github.event.inputs.order_action }}",
            "order_id": "${{ github.event.inputs.order_id }}",
            "dry_run": ${{ github.event.inputs.dry_run }},
            "environment": "${{ github.event.inputs.environment }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          }
          EOF
          
          echo "📤 Processing order operation..."
          response=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "X-API-Key: $API_KEY" \
            -d @payload.json \
            "$TRADING_SERVER_URL/api/comprehensive-execute")
          
          echo "📋 Order Response: $response"

  # Execute market data operations
  execute-market-data:
    needs: validate-and-route
    if: github.event.inputs.operation_type == 'market_data'
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔧 Setup Environment
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="$HOME/.cargo/bin:$PATH"
          uv pip install --system requests
      
      - name: 📊 Execute Market Data Operation
        env:
          TRADING_SERVER_URL: ${{ secrets.TRADING_SERVER_URL || 'https://your-trading-server.com' }}
          API_KEY: ${{ secrets.TRADING_API_KEY }}
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          
          cat > payload.json << EOF
          {
            "operation_type": "market_data",
            "action": "${{ github.event.inputs.market_action }}",
            "symbol": "${{ github.event.inputs.symbol }}",
            "symbols_list": "${{ github.event.inputs.symbols_list }}",
            "environment": "${{ github.event.inputs.environment }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          }
          EOF
          
          echo "📤 Fetching market data..."
          response=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "X-API-Key: $API_KEY" \
            -d @payload.json \
            "$TRADING_SERVER_URL/api/comprehensive-execute")
          
          echo "📊 Market Data Response: $response"

  # Cleanup and summary
  summary:
    needs: [validate-and-route, execute-trading, execute-portfolio, execute-orders, execute-market-data]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: 📝 Operation Summary
        run: |
          echo "## 🚀 Trading Operation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Operation Type:** ${{ github.event.inputs.operation_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dry Run:** ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add operation-specific details
          case "${{ github.event.inputs.operation_type }}" in
            "trading")
              echo "**Trading Details:**" >> $GITHUB_STEP_SUMMARY
              echo "- Action: ${{ github.event.inputs.trading_action }}" >> $GITHUB_STEP_SUMMARY
              echo "- Symbol: ${{ github.event.inputs.symbol }}" >> $GITHUB_STEP_SUMMARY
              echo "- Quantity: ${{ github.event.inputs.quantity }}" >> $GITHUB_STEP_SUMMARY
              ;;
            "portfolio")
              echo "**Portfolio Details:**" >> $GITHUB_STEP_SUMMARY
              echo "- Action: ${{ github.event.inputs.portfolio_action }}" >> $GITHUB_STEP_SUMMARY
              ;;
            "orders")
              echo "**Order Details:**" >> $GITHUB_STEP_SUMMARY
              echo "- Action: ${{ github.event.inputs.order_action }}" >> $GITHUB_STEP_SUMMARY
              echo "- Order ID: ${{ github.event.inputs.order_id }}" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Access Methods:**" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub UI: Repository → Actions → Run workflow" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub CLI: \`gh workflow run comprehensive-trading.yml\`" >> $GITHUB_STEP_SUMMARY
          echo "- REST API: \`POST /repos/owner/repo/actions/workflows/comprehensive-trading.yml/dispatches\`" >> $GITHUB_STEP_SUMMARY 