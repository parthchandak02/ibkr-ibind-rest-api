{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcc8 IBKR Trading REST API","text":"<p>Interactive Brokers trading server with GitHub Actions integration</p>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<pre><code># 1. Install dependencies\nuv sync\n\n# 2. Start the server  \nuv run python run_server.py --port 8080\n\n# 3. Test the workflow trigger\nuv run python test_workflow_trigger.py\n</code></pre>"},{"location":"#documentation-structure","title":"\ud83d\udcda Documentation Structure","text":"<p>Our documentation follows the Di\u00e1taxis framework for organized, user-focused content:</p>"},{"location":"#tutorials","title":"\ud83c\udf93 Tutorials","text":"<p>Learning-oriented - Step-by-step lessons for beginners - Getting Started - Your first trading server setup - First Trade Execution - Execute your first trade via GitHub Actions</p>"},{"location":"#how-to-guides","title":"\ud83d\udee0\ufe0f How-to Guides","text":"<p>Goal-oriented - Solutions for specific tasks - Set up GitHub Actions - Configure automated trading workflows - Configure IBKR Authentication - Set up Interactive Brokers connection - Use Flask CLI Commands - Manage trading operations via command line</p>"},{"location":"#explanations","title":"\ud83d\udca1 Explanations","text":"<p>Understanding-oriented - Background concepts and architecture - System Architecture - How the trading system works - Security Model - Authentication and protection mechanisms - Trading Workflows - How trades flow through the system</p>"},{"location":"#reference","title":"\ud83d\udcd6 Reference","text":"<p>Information-oriented - Technical specifications and APIs - API Endpoints - Complete REST API documentation - Flask CLI Commands - All available CLI commands - Configuration Options - Environment variables and settings</p>"},{"location":"#what-this-documentation-covers","title":"\ud83c\udfaf What This Documentation Covers","text":"<p>This documentation helps you:</p> <ul> <li>Set up a secure IBKR trading server</li> <li>Integrate with GitHub Actions for automated trading  </li> <li>Execute trades programmatically via REST API</li> <li>Manage portfolios using Flask CLI commands</li> <li>Understand the security and architecture design</li> </ul>"},{"location":"#important-security-notes","title":"\ud83d\udea8 Important Security Notes","text":"<p>\u26a0\ufe0f This system handles real money and trading operations - Always test with paper trading first - Review all security configurations - Understand rate limits and safeguards - Never expose API keys in public repositories</p>"},{"location":"#built-with","title":"\ud83c\udfd7\ufe0f Built With","text":"<ul> <li>UV - Modern Python package manager  </li> <li>Flask - Web framework for REST API</li> <li>IBKR API - Interactive Brokers trading interface</li> <li>GitHub Actions - Automated workflow execution</li> </ul>"},{"location":"#support-contributing","title":"\ud83d\udcde Support &amp; Contributing","text":"<ul> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions </li> <li>Documentation: You're reading it! \ud83d\udcd6</li> </ul> <p>Ready to get started? Check out our Getting Started Tutorial! \ud83d\ude80 </p>"},{"location":"api_endpoint_analysis/","title":"IBKR REST API Endpoint Analysis","text":"<p>Based on testing the running backend server on port 8080, here are all available endpoints and their response formats:</p>"},{"location":"api_endpoint_analysis/#authentication","title":"Authentication","text":"<ul> <li>Header Required: <code>X-API-Key: YOUR_API_KEY_PLACEHOLDER</code></li> </ul>"},{"location":"api_endpoint_analysis/#available-endpoints","title":"Available Endpoints","text":""},{"location":"api_endpoint_analysis/#1-health-status","title":"1. Health &amp; Status","text":"<ul> <li>GET /health - Check system health</li> <li>GET /events/health - SSE endpoint for real-time health updates</li> <li>GET /auth - Authentication check</li> <li>POST /generate-api-key - Generate new API key</li> <li>POST /switch-environment - Switch trading environment</li> </ul>"},{"location":"api_endpoint_analysis/#2-account-portfolio","title":"2. Account &amp; Portfolio","text":"<ul> <li>GET /account - Returns complete account information including:</li> <li>Account details and summary</li> <li>ALL position data (HUGE response with detailed position info)</li> <li>Net liquidity, buying power, etc.</li> <li> <p>Format: <code>{\"environment\": \"live_trading\", \"selected_account\": \"U14716312\", ...}</code></p> </li> <li> <p>GET /positions - Returns just the positions array with metadata:</p> </li> <li>Format: <code>{\"environment\": \"live_trading\", \"positions\": [...], \"status\": \"ok\", \"summary\": {\"displayed\": 10, \"total_available\": 100, \"timestamp\": \"2025-05-30T10:29:33.262535\"}}</code></li> <li> <p>Each position contains: <code>acctId</code>, <code>ticker</code>, <code>position</code>, <code>mktPrice</code>, <code>mktValue</code>, <code>avgCost</code>, <code>unrealizedPnl</code>, <code>name</code>, <code>sector</code>, <code>sectorGroup</code>, <code>assetClass</code>, etc.</p> </li> <li> <p>GET /positions/csv - Returns positions in CSV format</p> </li> </ul>"},{"location":"api_endpoint_analysis/#3-orders","title":"3. Orders","text":"<ul> <li>GET /orders - Returns all orders:</li> <li>Format: <code>{\"data\": {\"orders\": [...], \"snapshot\": true}, \"status\": \"ok\"}</code></li> <li> <p>Each order contains: <code>orderId</code>, <code>ticker</code>, <code>side</code>, <code>totalSize</code>, <code>price</code>, <code>status</code>, <code>orderType</code>, <code>companyName</code>, etc.</p> </li> <li> <p>GET /order/ - Get specific order details <li>POST /order - Place new order</li> <li>DELETE /order/ - Cancel order <li>POST /percentage-limit-order/ - Place percentage-based limit order"},{"location":"api_endpoint_analysis/#key-response-formats","title":"Key Response Formats","text":""},{"location":"api_endpoint_analysis/#position-object-structure","title":"Position Object Structure:","text":"<pre><code>{\n  \"acctId\": \"U14716312\",\n  \"ticker\": \"TSLA\", \n  \"name\": \"TESLA INC\",\n  \"position\": 4.7833,\n  \"avgCost\": 248.8229883,\n  \"avgPrice\": 248.8229883,\n  \"mktPrice\": 348.16970825,\n  \"mktValue\": 1665.4,\n  \"unrealizedPnl\": 475.21,\n  \"realizedPnl\": 0.0,\n  \"assetClass\": \"STK\",\n  \"currency\": \"USD\",\n  \"conid\": 76792991,\n  \"sector\": \"Consumer, Cyclical\",\n  \"sectorGroup\": \"Auto-Cars/Light Trucks\",\n  \"group\": \"Auto Manufacturers\",\n  \"type\": \"COMMON\",\n  \"listingExchange\": \"NASDAQ\",\n  \"hasOptions\": true\n}\n</code></pre>"},{"location":"api_endpoint_analysis/#order-object-structure","title":"Order Object Structure:","text":"<pre><code>{\n  \"orderId\": 131441236,\n  \"account\": \"U14716312\",\n  \"ticker\": \"FLCH\",\n  \"companyName\": \"FRANKLIN FTSE CHINA ETF\",\n  \"side\": \"SELL\",\n  \"totalSize\": 16.0,\n  \"remainingQuantity\": 16.0,\n  \"filledQuantity\": 0.0,\n  \"price\": \"25.00\",\n  \"orderType\": \"Limit\",\n  \"origOrderType\": \"LIMIT\",\n  \"timeInForce\": \"GTC\",\n  \"status\": \"Submitted\",\n  \"order_ccp_status\": \"Submitted\",\n  \"orderDesc\": \"Sell 16 FLCH Limit 25.00, GTC\",\n  \"lastExecutionTime\": \"250319061240\",\n  \"lastExecutionTime_r\": 1742364760000,\n  \"outsideRTH\": true,\n  \"listingExchange\": \"ARCA\",\n  \"secType\": \"STK\",\n  \"cashCcy\": \"USD\"\n}\n</code></pre>"},{"location":"api_endpoint_analysis/#summary-object-structures","title":"Summary Object Structures:","text":""},{"location":"api_endpoint_analysis/#positions-summary","title":"Positions Summary:","text":"<pre><code>{\n  \"summary\": {\n    \"displayed\": 10,\n    \"total_available\": 100,\n    \"timestamp\": \"2025-05-30T10:29:33.262535\"\n  }\n}\n</code></pre>"},{"location":"api_endpoint_analysis/#health-status","title":"Health Status:","text":"<pre><code>{\n  \"status\": \"healthy\",\n  \"ibkr_connected\": true,\n  \"environment\": \"live_trading\",\n  \"timestamp\": 1748312345.678\n}\n</code></pre>"},{"location":"api_endpoint_analysis/#missing-endpoints-not-found","title":"Missing Endpoints (Not Found):","text":"<ul> <li><code>/quote</code> - Market data quotes</li> <li><code>/market-data</code> - Real-time market data</li> <li>Options chain data endpoints</li> <li>Historical price data endpoints</li> <li>Fundamental data endpoints</li> </ul>"},{"location":"api_endpoint_analysis/#notes-for-frontend-development","title":"Notes for Frontend Development:","text":"<ol> <li>Account endpoint returns EVERYTHING including positions - very large response (~500KB+)</li> <li>Positions endpoint is cleaner for portfolio display with pagination info</li> <li>Orders endpoint shows both active and historical orders with detailed execution info</li> <li>All responses include environment info (\"live_trading\")</li> <li>Positions include comprehensive financial data (P&amp;L, costs, values, sector classification)</li> <li>Currency is consistently USD for this account</li> <li>No market data endpoints available - would need to implement separately or use external data source</li> <li>Positions include detailed exchange routing information (not typically needed for UI)</li> <li>Real-time updates available via SSE at <code>/events/health</code></li> <li>Order cancellation uses DELETE method on <code>/order/&lt;order_id&gt;</code></li> </ol>"},{"location":"api_endpoint_analysis/#error-handling","title":"Error Handling:","text":"<ul> <li>Invalid endpoints return HTML 404 page</li> <li>Authentication failures return appropriate HTTP error codes  </li> <li>All successful responses include <code>\"status\": \"ok\"</code></li> <li>Failed operations return error objects with details</li> </ul>"},{"location":"api_endpoint_analysis/#data-quality-notes","title":"Data Quality Notes:","text":"<ul> <li>Position values are real-time market prices</li> <li>Unrealized P&amp;L calculations are automatic</li> <li>Order statuses reflect actual IBKR order states</li> <li>Exchange routing data is comprehensive but may be excessive for basic UI needs</li> <li>Chinese names available for international securities (<code>chineseName</code> field)</li> </ul>"},{"location":"api_endpoint_analysis/#performance-considerations","title":"Performance Considerations:","text":"<ul> <li>Positions endpoint: ~500KB response for 100+ positions</li> <li>Orders endpoint: Variable size based on order history  </li> <li>Health endpoint: Lightweight (&lt;1KB)</li> <li>Real-time updates via SSE reduce need for polling </li> </ul>"},{"location":"api_reference/","title":"\ud83d\udd27 IBKR Trading Dashboard API Reference","text":"<p>Complete REST API documentation for the IBKR Trading Dashboard backend.</p>"},{"location":"api_reference/#base-information","title":"\ud83c\udfaf Base Information","text":"<ul> <li>Base URL: <code>http://localhost:8080</code></li> <li>Authentication: API Key via <code>X-API-Key</code> header</li> <li>Content Type: <code>application/json</code></li> <li>Rate Limiting: 60 requests per minute per IP</li> </ul>"},{"location":"api_reference/#authentication","title":"\ud83d\udd10 Authentication","text":"<p>All API endpoints require authentication via API key:</p> <pre><code>curl -H \"X-API-Key: YOUR_API_KEY\" http://localhost:8080/health\n</code></pre>"},{"location":"api_reference/#generate-api-key","title":"Generate API Key","text":"<pre><code>python3 utils/generate_key.py --name \"Trading Dashboard\"\n</code></pre>"},{"location":"api_reference/#core-endpoints","title":"\ud83d\udcca Core Endpoints","text":""},{"location":"api_reference/#health-status","title":"Health &amp; Status","text":""},{"location":"api_reference/#get-health","title":"<code>GET /health</code>","text":"<p>Returns system health and IBKR connection status.</p> <p>Response: <pre><code>{\n  \"status\": \"ok\",\n  \"timestamp\": \"2025-05-30T11:31:32\",\n  \"environment\": \"live_trading\",\n  \"ibkr_connected\": true,\n  \"account_id\": \"U14716312\",\n  \"cache_age\": 45,\n  \"version\": \"1.0.0\"\n}\n</code></pre></p>"},{"location":"api_reference/#account-portfolio","title":"Account &amp; Portfolio","text":""},{"location":"api_reference/#get-account","title":"<code>GET /account</code>","text":"<p>Returns complete account information with paginated positions.</p> <p>Parameters: - <code>page</code> (optional): Page number for position pagination (default: 0) - <code>limit</code> (optional): Number of positions per page (default: 100)</p> <p>Response: <pre><code>{\n  \"status\": \"ok\",\n  \"environment\": \"live_trading\",\n  \"data\": {\n    \"selected_account\": \"U14716312\",\n    \"positions\": [\n      {\n        \"ticker\": \"AAPL\",\n        \"name\": \"Apple Inc\",\n        \"position\": 10.0,\n        \"mktPrice\": 150.25,\n        \"mktValue\": 1502.50,\n        \"unrealizedPnl\": 25.50,\n        \"currency\": \"USD\"\n      }\n    ],\n    \"pagination\": {\n      \"current_page\": 0,\n      \"total_pages\": 2,\n      \"total_positions\": 133,\n      \"positions_per_page\": 100\n    }\n  }\n}\n</code></pre></p>"},{"location":"api_reference/#get-positions","title":"<code>GET /positions</code>","text":"<p>Returns simplified positions summary.</p> <p>Parameters: - <code>limit</code> (optional): Number of positions to return (default: 50)</p> <p>Response: <pre><code>{\n  \"status\": \"ok\",\n  \"data\": {\n    \"positions\": [\n      {\n        \"ticker\": \"MSFT\",\n        \"position\": 25.0,\n        \"mktValue\": 8750.00,\n        \"unrealizedPnl\": 125.00\n      }\n    ],\n    \"total_count\": 133\n  }\n}\n</code></pre></p>"},{"location":"api_reference/#order-management","title":"Order Management","text":""},{"location":"api_reference/#get-orders","title":"<code>GET /orders</code>","text":"<p>Returns order history and current orders.</p> <p>Response: <pre><code>{\n  \"status\": \"ok\",\n  \"environment\": \"live_trading\",\n  \"data\": {\n    \"orders\": [\n      {\n        \"orderId\": \"12345678\",\n        \"ticker\": \"TSLA\",\n        \"companyName\": \"Tesla Inc\",\n        \"side\": \"BUY\",\n        \"totalSize\": 10,\n        \"price\": 250.00,\n        \"status\": \"Submitted\",\n        \"timeInForce\": \"GTC\",\n        \"remainingQuantity\": 10\n      }\n    ]\n  }\n}\n</code></pre></p>"},{"location":"api_reference/#post-order","title":"<code>POST /order</code>","text":"<p>Places a new trading order.</p> <p>Request Body: <pre><code>{\n  \"conid\": \"265598\",\n  \"side\": \"BUY\",\n  \"quantity\": 10,\n  \"order_type\": \"LMT\",\n  \"price\": 150.00,\n  \"tif\": \"GTC\",\n  \"order_tag\": \"my-order-123\"\n}\n</code></pre></p> <p>Parameters: - <code>conid</code> (required): Contract ID for the security - <code>side</code> (required): \"BUY\" or \"SELL\" - <code>quantity</code> (required): Number of shares - <code>order_type</code> (required): \"MKT\", \"LMT\", \"STP\", \"STP_LMT\" - <code>price</code> (optional): Required for limit orders - <code>tif</code> (optional): \"GTC\", \"DAY\", \"IOC\", \"FOK\" (default: \"DAY\") - <code>order_tag</code> (optional): Custom order identifier</p> <p>Response: <pre><code>{\n  \"status\": \"ok\",\n  \"environment\": \"live_trading\",\n  \"data\": {\n    \"orderId\": \"87654321\",\n    \"status\": \"Submitted\"\n  },\n  \"order_tag\": \"my-order-123\"\n}\n</code></pre></p>"},{"location":"api_reference/#delete-orderorder_id","title":"<code>DELETE /order/&lt;order_id&gt;</code>","text":"<p>Cancels an existing order.</p> <p>Response: <pre><code>{\n  \"status\": \"ok\",\n  \"environment\": \"live_trading\",\n  \"data\": {\n    \"orderId\": \"87654321\",\n    \"status\": \"Cancelled\"\n  }\n}\n</code></pre></p>"},{"location":"api_reference/#environment-management","title":"Environment Management","text":""},{"location":"api_reference/#post-switch-environment","title":"<code>POST /switch-environment</code>","text":"<p>Switches between live and paper trading environments.</p> <p>Request Body: <pre><code>{\n  \"environment\": \"paper_trading\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"ok\",\n  \"message\": \"Environment switched to paper_trading\",\n  \"environment\": \"paper_trading\"\n}\n</code></pre></p>"},{"location":"api_reference/#market-data","title":"Market Data","text":""},{"location":"api_reference/#get-market-datasymbol","title":"<code>GET /market-data/&lt;symbol&gt;</code>","text":"<p>Returns real-time market data for a symbol.</p> <p>Example: <code>GET /market-data/AAPL</code></p> <p>Response: <pre><code>{\n  \"status\": \"ok\",\n  \"data\": {\n    \"symbol\": \"AAPL\",\n    \"price\": 150.25,\n    \"change\": 1.25,\n    \"changePercent\": 0.84,\n    \"volume\": 45234567,\n    \"timestamp\": \"2025-05-30T15:30:00Z\"\n  }\n}\n</code></pre></p>"},{"location":"api_reference/#get-options-chainsymbol","title":"<code>GET /options-chain/&lt;symbol&gt;</code>","text":"<p>Returns options chain data for a symbol.</p> <p>Example: <code>GET /options-chain/AAPL</code></p> <p>Response: <pre><code>{\n  \"status\": \"ok\",\n  \"data\": {\n    \"symbol\": \"AAPL\",\n    \"expiration_dates\": [\"2025-06-20\", \"2025-07-18\"],\n    \"strikes\": [145, 150, 155, 160],\n    \"options\": [\n      {\n        \"strike\": 150,\n        \"expiration\": \"2025-06-20\",\n        \"call_bid\": 5.25,\n        \"call_ask\": 5.50,\n        \"put_bid\": 3.75,\n        \"put_ask\": 4.00\n      }\n    ]\n  }\n}\n</code></pre></p>"},{"location":"api_reference/#advanced-trading","title":"\ud83d\ude80 Advanced Trading","text":""},{"location":"api_reference/#percentage-based-orders","title":"Percentage-Based Orders","text":""},{"location":"api_reference/#post-percentage-limit-ordersymbol","title":"<code>POST /percentage-limit-order/&lt;symbol&gt;</code>","text":"<p>Places percentage-based limit orders.</p> <p>For SELL orders: <pre><code>{\n  \"side\": \"SELL\",\n  \"percentage_above_market\": 2.5,\n  \"percentage_of_position\": 50.0,\n  \"time_in_force\": \"GTC\"\n}\n</code></pre></p> <p>For BUY orders: <pre><code>{\n  \"side\": \"BUY\",\n  \"percentage_below_market\": 1.5,\n  \"dollar_amount\": 1000.00,\n  \"time_in_force\": \"GTC\"\n}\n</code></pre></p>"},{"location":"api_reference/#error-handling","title":"\ud83d\udd0d Error Handling","text":""},{"location":"api_reference/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Detailed error description\",\n  \"error_code\": \"INVALID_SYMBOL\",\n  \"timestamp\": \"2025-05-30T11:31:32Z\"\n}\n</code></pre>"},{"location":"api_reference/#common-error-codes","title":"Common Error Codes","text":"<ul> <li><code>MISSING_API_KEY</code>: No API key provided</li> <li><code>INVALID_API_KEY</code>: Invalid or expired API key</li> <li><code>RATE_LIMIT_EXCEEDED</code>: Too many requests</li> <li><code>INVALID_SYMBOL</code>: Symbol not found</li> <li><code>INSUFFICIENT_FUNDS</code>: Not enough buying power</li> <li><code>MARKET_CLOSED</code>: Trading session closed</li> <li><code>INVALID_ORDER_TYPE</code>: Unsupported order type</li> </ul>"},{"location":"api_reference/#http-status-codes","title":"HTTP Status Codes","text":"<ul> <li><code>200</code>: Success</li> <li><code>400</code>: Bad Request (invalid parameters)</li> <li><code>401</code>: Unauthorized (missing/invalid API key)</li> <li><code>429</code>: Too Many Requests (rate limit exceeded)</li> <li><code>500</code>: Internal Server Error</li> </ul>"},{"location":"api_reference/#rate-limiting","title":"\ud83d\udcdd Rate Limiting","text":"<p>API requests are limited to protect system stability:</p> <ul> <li>Global Limit: 60 requests per minute per IP</li> <li>Order Endpoints: 10 requests per minute</li> <li>Market Data: 30 requests per minute</li> </ul> <p>Rate limit headers are included in responses: <pre><code>X-RateLimit-Limit: 60\nX-RateLimit-Remaining: 45\nX-RateLimit-Reset: 1640995200\n</code></pre></p>"},{"location":"api_reference/#testing-examples","title":"\ud83e\uddea Testing Examples","text":""},{"location":"api_reference/#test-api-health","title":"Test API Health","text":"<pre><code>curl -H \"X-API-Key: YOUR_KEY\" \\\n     http://localhost:8080/health\n</code></pre>"},{"location":"api_reference/#get-portfolio-positions","title":"Get Portfolio Positions","text":"<pre><code>curl -H \"X-API-Key: YOUR_KEY\" \\\n     \"http://localhost:8080/account?page=0&amp;limit=10\"\n</code></pre>"},{"location":"api_reference/#place-market-order","title":"Place Market Order","text":"<pre><code>curl -X POST \\\n     -H \"X-API-Key: YOUR_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"conid\": \"265598\",\n       \"side\": \"BUY\",\n       \"quantity\": 10,\n       \"order_type\": \"MKT\",\n       \"tif\": \"GTC\"\n     }' \\\n     http://localhost:8080/order\n</code></pre>"},{"location":"api_reference/#place-limit-order","title":"Place Limit Order","text":"<pre><code>curl -X POST \\\n     -H \"X-API-Key: YOUR_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"conid\": \"265598\",\n       \"side\": \"BUY\",\n       \"quantity\": 10,\n       \"order_type\": \"LMT\",\n       \"price\": 150.00,\n       \"tif\": \"GTC\"\n     }' \\\n     http://localhost:8080/order\n</code></pre>"},{"location":"api_reference/#switch-to-paper-trading","title":"Switch to Paper Trading","text":"<pre><code>curl -X POST \\\n     -H \"X-API-Key: YOUR_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"environment\": \"paper_trading\"}' \\\n     http://localhost:8080/switch-environment\n</code></pre>"},{"location":"api_reference/#integration-examples","title":"\ud83d\udd27 Integration Examples","text":""},{"location":"api_reference/#python-integration","title":"Python Integration","text":"<pre><code>import requests\n\nAPI_KEY = \"your-api-key-here\"\nBASE_URL = \"http://localhost:8080\"\n\nheaders = {\"X-API-Key\": API_KEY}\n\n# Get portfolio\nresponse = requests.get(f\"{BASE_URL}/account\", headers=headers)\nportfolio = response.json()\n\n# Place order\norder_data = {\n    \"conid\": \"265598\",\n    \"side\": \"BUY\",\n    \"quantity\": 10,\n    \"order_type\": \"MKT\",\n    \"tif\": \"GTC\"\n}\nresponse = requests.post(f\"{BASE_URL}/order\", json=order_data, headers=headers)\norder_result = response.json()\n</code></pre>"},{"location":"api_reference/#javascript-integration","title":"JavaScript Integration","text":"<pre><code>const API_KEY = 'your-api-key-here';\nconst BASE_URL = 'http://localhost:8080';\n\nconst headers = {\n  'X-API-Key': API_KEY,\n  'Content-Type': 'application/json'\n};\n\n// Get portfolio\nconst portfolio = await fetch(`${BASE_URL}/account`, { headers })\n  .then(res =&gt; res.json());\n\n// Place order\nconst orderData = {\n  conid: '265598',\n  side: 'BUY',\n  quantity: 10,\n  order_type: 'MKT',\n  tif: 'GTC'\n};\n\nconst orderResult = await fetch(`${BASE_URL}/order`, {\n  method: 'POST',\n  headers,\n  body: JSON.stringify(orderData)\n}).then(res =&gt; res.json());\n</code></pre>"},{"location":"api_reference/#security-best-practices","title":"\ud83d\udd10 Security Best Practices","text":"<ol> <li>Store API keys securely - Never commit to version control</li> <li>Use HTTPS in production - Encrypt all API communications</li> <li>Implement IP whitelisting - Restrict access to known IPs</li> <li>Monitor rate limits - Implement proper backoff strategies</li> <li>Log all trading activity - Maintain audit trails</li> <li>Use environment variables - Keep credentials separate from code</li> </ol>"},{"location":"api_reference/#production-deployment","title":"\ud83d\udcca Production Deployment","text":""},{"location":"api_reference/#environment-variables","title":"Environment Variables","text":"<pre><code>export IBKR_ENVIRONMENT=live_trading\nexport API_RATE_LIMIT=60\nexport LOG_LEVEL=INFO\nexport OAUTH_CERT_PATH=/path/to/certs\n</code></pre>"},{"location":"api_reference/#docker-deployment","title":"Docker Deployment","text":"<pre><code>FROM python:3.11-slim\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nCOPY . .\nEXPOSE 8080\nCMD [\"python\", \"run_server.py\"]\n</code></pre> <p>\ud83d\udcda For more examples and integration guides, see the main README and frontend documentation. </p>"},{"location":"frontend_guide/","title":"\ud83c\udfa8 Streamlit Trading Dashboard Guide","text":"<p>Professional frontend interface for the IBKR Trading Dashboard built with Streamlit.</p>"},{"location":"frontend_guide/#overview","title":"\ud83c\udfaf Overview","text":"<p>The frontend provides a modern, professional trading interface with: - \ud83c\udfa8 Dark Theme: Professional trading UI with animations - \u26a1 Real-time Data: Live portfolio updates every few seconds - \ud83d\udcca Interactive Charts: Accurate portfolio distribution visualization - \ud83d\udcb0 Inline Trading: Buy/Sell directly from portfolio table - \ud83d\udd0d Data Verification: Built-in accuracy validation tools</p>"},{"location":"frontend_guide/#quick-start","title":"\ud83d\ude80 Quick Start","text":"<pre><code># 1. Ensure backend is running\npython run_server.py  # Backend on :8080\n\n# 2. Start frontend\ncd frontend\nstreamlit run streamlit_app.py --server.port 8501\n\n# 3. Access dashboard\nopen http://localhost:8501\n</code></pre>"},{"location":"frontend_guide/#frontend-structure","title":"\ud83d\udcc1 Frontend Structure","text":"<pre><code>frontend/\n\u251c\u2500\u2500 streamlit_app.py          # Main dashboard application\n\u251c\u2500\u2500 .streamlit/\n\u2502   \u251c\u2500\u2500 config.toml          # Streamlit configuration &amp; dark theme\n\u2502   \u2514\u2500\u2500 secrets.toml         # API key configuration\n\u2514\u2500\u2500 requirements.txt         # Dependencies (merged into root)\n</code></pre>"},{"location":"frontend_guide/#dashboard-pages","title":"\ud83c\udf9b\ufe0f Dashboard Pages","text":""},{"location":"frontend_guide/#overview-dashboard","title":"\ud83c\udfe0 Overview Dashboard","text":"<p>Primary landing page with portfolio summary</p> <p>Features: - Connection Status: Live IBKR connection monitoring - Environment Display: Live/Paper trading indicator - Account Information: Account ID and last update time - Portfolio Summary: Total value, P&amp;L, position count, average position size - Distribution Chart: Interactive donut chart showing top 15 holdings</p> <p>Key Metrics: - Total Portfolio Value: $85,009.40 - Total Positions: 133 - Unrealized P&amp;L: Live calculation with color coding - Average Position Size: Calculated across all holdings</p> <p>Chart Features: - Accurate Data: Based on all 133 positions, not just a sample - Top Holdings: Shows largest 15 positions by market value - Others Category: Combines remaining positions for clarity - Color Coding: Green for long positions, red for short positions - Interactive Tooltips: Hover for detailed values and percentages</p>"},{"location":"frontend_guide/#portfolio-management","title":"\ud83d\udcbc Portfolio Management","text":"<p>Advanced portfolio management with inline trading</p> <p>Interactive Trading Table: - Position Details: Symbol, company name, shares, price, value, P&amp;L - Buy/Sell Buttons: Inline trading for each position - Color-coded P&amp;L: Green for gains, red for losses</p> <p>Quick Actions: - \ud83d\udfe2 Buy 10: Market order for 10 shares - \ud83d\udcb0 Buy $1000: Calculated quantity for $1000 worth - \ud83d\udd34 Sell All: Market order for entire position - \ud83d\udcca Sell Half: Market order for 50% of position</p> <p>Custom Order Forms: - Order Types: Market and Limit orders - Smart Defaults: Pre-populated quantities and suggested prices - Price Suggestions: Limit orders 1% better than market price - Time in Force: GTC (Good Till Cancel) and DAY options - Validation: Real-time form validation and error handling</p> <p>Data Verification Section: - Top Holdings: Expandable section with detailed breakdown - Calculation Audit: Long vs short position totals - Accuracy Check: Verification that totals match IBKR data</p>"},{"location":"frontend_guide/#order-management","title":"\ud83d\udccb Order Management","text":"<p>Comprehensive order tracking and management</p> <p>Order Metrics: - Total Orders: Complete order count - Active Orders: Currently pending orders - Filled Orders: Completed orders</p> <p>Order Details Table: - Order ID, Symbol, Company Name - Side (Buy/Sell), Quantity, Price - Status, Time in Force - Real-time status updates</p>"},{"location":"frontend_guide/#market-data","title":"\ud83d\udcca Market Data","text":"<p>Real-time market data lookup</p> <p>Features: - Symbol Search: Enter any ticker symbol - Live Quotes: Real-time price data - Options Chain: Options data for any symbol - Error Handling: Graceful handling of invalid symbols</p>"},{"location":"frontend_guide/#trading-interface","title":"\ud83d\udcb0 Trading Interface","text":"<p>Professional order entry system</p> <p>Order Entry Form: - Symbol Input: Ticker symbol with validation - Side Selection: Buy/Sell with visual indicators - Quantity Input: Share quantity with validation - Order Types: Market and Limit order support - Price Entry: Limit price for limit orders - Time in Force: GTC/DAY selection - Order Confirmation: Detailed order verification</p>"},{"location":"frontend_guide/#settings-configuration","title":"\u2699\ufe0f Settings &amp; Configuration","text":"<p>System configuration and monitoring</p> <p>Environment Management: - Current Environment: Live/Paper trading display - Environment Switching: Toggle between environments - Switch Confirmation: Verification before switching</p> <p>System Information: - API Configuration: Base URL and API key (masked) - Health Status: Complete system health data - Connection Monitoring: Real-time IBKR connection status</p>"},{"location":"frontend_guide/#design-system","title":"\ud83c\udfa8 Design System","text":""},{"location":"frontend_guide/#color-palette","title":"Color Palette","text":"<pre><code>Primary: #00D4AA (Teal Green)\nBackground: #0E1117 (Dark Gray)\nSecondary: #1E1E1E (Medium Gray)\nText: #FAFAFA (Off White)\nSuccess: #00D4AA (Green)\nError: #FF6B6B (Red)\nWarning: #FFA500 (Orange)\n</code></pre>"},{"location":"frontend_guide/#typography","title":"Typography","text":"<pre><code>Font Family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif\nHeaders: 600-700 weight\nBody Text: 400 weight\nCode/Monospace: 'JetBrains Mono'\n</code></pre>"},{"location":"frontend_guide/#ui-components","title":"UI Components","text":"<p>Metrics Cards: <pre><code>st.metric(\"Portfolio Value\", \"$85,009.40\", delta=\"$1,953.84\")\n</code></pre></p> <p>Interactive Buttons: <pre><code>st.button(\"\ud83d\udfe2 Buy\", type=\"secondary\", key=f\"buy_{ticker}\")\nst.button(\"\ud83d\ude80 Place Order\", type=\"primary\")\n</code></pre></p> <p>Data Tables: <pre><code>st.dataframe(df, use_container_width=True, height=400)\n</code></pre></p> <p>Charts: <pre><code>fig = go.Figure(data=[go.Pie(...)])  # Plotly charts\nst.plotly_chart(fig, use_container_width=True)\n</code></pre></p>"},{"location":"frontend_guide/#responsive-design","title":"Responsive Design","text":"<ul> <li>Column Layouts: Flexible column systems for different screen sizes</li> <li>Mobile Optimization: Touch-friendly buttons and inputs</li> <li>Adaptive Charts: Charts resize based on container width</li> <li>Scrollable Tables: Horizontal scroll for wide data tables</li> </ul>"},{"location":"frontend_guide/#technical-implementation","title":"\ud83d\udd27 Technical Implementation","text":""},{"location":"frontend_guide/#api-integration","title":"API Integration","text":"<pre><code>def make_api_request(endpoint, method=\"GET\", params=None, json=None):\n    \"\"\"Enhanced API request with loading states\"\"\"\n    headers = {\"X-API-Key\": API_KEY}\n    url = f\"{API_BASE_URL}/{endpoint}\"\n\n    try:\n        if method == \"GET\":\n            response = requests.get(url, headers=headers, params=params, timeout=10)\n        elif method == \"POST\":\n            response = requests.post(url, headers=headers, json=json, timeout=10)\n\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.RequestException as e:\n        st.error(f\"\ud83d\udea8 API Error: {e}\")\n        return None\n</code></pre>"},{"location":"frontend_guide/#real-time-updates","title":"Real-time Updates","text":"<pre><code># Auto-refresh every 30 seconds\nif st.button(\"\ud83d\udd04 Refresh Data\", key=\"refresh\"):\n    st.rerun()\n\n# Session state management\nif \"last_update\" not in st.session_state:\n    st.session_state.last_update = datetime.now()\n</code></pre>"},{"location":"frontend_guide/#order-placement","title":"Order Placement","text":"<pre><code>def place_order_for_symbol(ticker, side, quantity, order_type=\"MARKET\", price=None):\n    \"\"\"Helper function to place orders using symbol\"\"\"\n    order_data = {\n        \"symbol\": ticker,\n        \"side\": side,\n        \"quantity\": quantity,\n        \"order_type\": \"MKT\" if order_type == \"MARKET\" else \"LMT\",\n        \"tif\": \"GTC\"\n    }\n\n    if order_type == \"LIMIT\" and price:\n        order_data[\"price\"] = price\n\n    return make_api_request(\"order\", method=\"POST\", json=order_data)\n</code></pre>"},{"location":"frontend_guide/#data-accuracy","title":"Data Accuracy","text":"<pre><code># Portfolio distribution calculation\nall_positions = []\nfor pos in positions:\n    mkt_value = pos.get(\"mktValue\", 0)\n    if isinstance(mkt_value, (int, float)) and mkt_value != 0:\n        all_positions.append({\n            'ticker': pos.get(\"ticker\", \"Unknown\"),\n            'mktValue': mkt_value,\n            'absValue': abs(mkt_value)\n        })\n\n# Sort by size and take top 15\nall_positions.sort(key=lambda x: x['absValue'], reverse=True)\ntop_positions = all_positions[:15]\n</code></pre>"},{"location":"frontend_guide/#performance-optimization","title":"\ud83d\udcca Performance Optimization","text":""},{"location":"frontend_guide/#efficient-data-handling","title":"Efficient Data Handling","text":"<ul> <li>Pagination: Backend handles 133+ positions with pagination</li> <li>Caching: Session state caching for frequently accessed data</li> <li>Lazy Loading: Charts and tables load only when needed</li> <li>Error Recovery: Graceful handling of API failures</li> </ul>"},{"location":"frontend_guide/#user-experience","title":"User Experience","text":"<ul> <li>Loading States: Spinners and progress indicators</li> <li>Error Messages: Clear, actionable error messages</li> <li>Keyboard Navigation: Accessible form navigation</li> <li>Touch Optimization: Mobile-friendly interactions</li> </ul>"},{"location":"frontend_guide/#memory-management","title":"Memory Management","text":"<ul> <li>Data Filtering: Show only relevant data (top 20 positions in trading table)</li> <li>Component Isolation: Independent components for better performance</li> <li>State Cleanup: Proper cleanup of temporary data</li> </ul>"},{"location":"frontend_guide/#security-features","title":"\ud83d\udd10 Security Features","text":""},{"location":"frontend_guide/#api-key-management","title":"API Key Management","text":"<pre><code># .streamlit/secrets.toml\n[api]\nkey = \"your-secure-api-key-here\"\n</code></pre>"},{"location":"frontend_guide/#input-validation","title":"Input Validation","text":"<pre><code># Quantity validation\nif custom_qty &lt;= 0:\n    st.error(\"Quantity must be positive\")\n    return\n\n# Price validation for limit orders\nif order_type == \"LIMIT\" and not price:\n    st.error(\"Price required for limit orders\")\n    return\n</code></pre>"},{"location":"frontend_guide/#error-handling","title":"Error Handling","text":"<pre><code>try:\n    result = make_api_request(\"order\", method=\"POST\", json=order_data)\n    if result:\n        st.success(\"\u2705 Order placed successfully!\")\n    else:\n        st.error(\"\u274c Failed to place order\")\nexcept Exception as e:\n    st.error(f\"\ud83d\udea8 Error: {e}\")\n</code></pre>"},{"location":"frontend_guide/#advanced-features","title":"\ud83c\udfaf Advanced Features","text":""},{"location":"frontend_guide/#smart-trading-logic","title":"Smart Trading Logic","text":"<pre><code># Smart price suggestions\nsuggested_price = mkt_price * 0.99 if buy_btn else mkt_price * 1.01\n\n# Pre-populated sell quantities\nmax_sell = int(abs(current_position)) if current_position &gt; 0 else 1\ncustom_qty = st.number_input(\"Quantity\", max_value=max_sell, value=max_sell)\n\n# Quick action calculations\nqty_for_1000 = int(1000 / mkt_price) if mkt_price &gt; 0 else 0\nhalf_position = int(abs(current_position) / 2)\n</code></pre>"},{"location":"frontend_guide/#data-verification","title":"Data Verification","text":"<pre><code># Real-time calculation verification\ntotal_calculated = df[\"mktValue\"].sum()\ntotal_positive = df[df[\"mktValue\"] &gt; 0][\"mktValue\"].sum()\ntotal_negative = df[df[\"mktValue\"] &lt; 0][\"mktValue\"].sum()\n\n# Display verification metrics\nst.metric(\"\ud83d\udcb0 Total Portfolio\", f\"${total_calculated:,.2f}\")\nst.metric(\"\ud83d\udcc8 Long Positions\", f\"${total_positive:,.2f}\")\nst.metric(\"\ud83d\udcc9 Short Positions\", f\"${total_negative:,.2f}\")\n</code></pre>"},{"location":"frontend_guide/#interactive-charts","title":"Interactive Charts","text":"<pre><code># Enhanced donut chart with center annotation\nfig.add_annotation(\n    text=f\"Total&lt;br&gt;${total_portfolio_value:,.0f}\",\n    x=0.5, y=0.5,\n    font_size=16,\n    font_color=\"white\",\n    showarrow=False\n)\n</code></pre>"},{"location":"frontend_guide/#development-workflow","title":"\ud83d\udee0\ufe0f Development Workflow","text":""},{"location":"frontend_guide/#local-development","title":"Local Development","text":"<pre><code># Terminal 1: Backend\npython run_server.py\n\n# Terminal 2: Frontend\nstreamlit run frontend/streamlit_app.py --server.port 8501 --server.headless true\n\n# Development with auto-reload\nstreamlit run frontend/streamlit_app.py --server.runOnSave true\n</code></pre>"},{"location":"frontend_guide/#configuration","title":"Configuration","text":"<pre><code># .streamlit/config.toml\n[theme]\nprimaryColor = \"#00D4AA\"\nbackgroundColor = \"#0E1117\"\nsecondaryBackgroundColor = \"#1E1E1E\"\ntextColor = \"#FAFAFA\"\n\n[server]\nport = 8501\nheadless = true\nrunOnSave = true\n</code></pre>"},{"location":"frontend_guide/#debugging","title":"Debugging","text":"<pre><code># Debug mode\nif st.checkbox(\"Debug Mode\"):\n    st.write(\"Session State:\", st.session_state)\n    st.write(\"API Response:\", api_response)\n    st.json(order_data)\n</code></pre>"},{"location":"frontend_guide/#future-enhancements","title":"\ud83d\udcc8 Future Enhancements","text":""},{"location":"frontend_guide/#planned-features","title":"Planned Features","text":"<ul> <li>WebSocket Integration: Real-time price updates</li> <li>Advanced Charts: TradingView integration</li> <li>Portfolio Analytics: Performance metrics and analysis</li> <li>Risk Management: Position sizing and risk tools</li> <li>Alert System: Price and position alerts</li> <li>Mobile App: Native mobile application</li> </ul>"},{"location":"frontend_guide/#technical-improvements","title":"Technical Improvements","text":"<ul> <li>State Management: Redux-like state management</li> <li>Component Library: Reusable UI components</li> <li>Testing Suite: Automated testing framework</li> <li>Performance Monitoring: Real-time performance metrics</li> </ul>"},{"location":"frontend_guide/#contributing","title":"\ud83e\udd1d Contributing","text":""},{"location":"frontend_guide/#development-setup","title":"Development Setup","text":"<ol> <li>Fork the repository</li> <li>Create feature branch: <code>git checkout -b feature/new-feature</code></li> <li>Install dependencies: <code>pip install -r requirements.txt</code></li> <li>Start development servers: Backend + Frontend</li> <li>Test thoroughly: Verify all functionality</li> <li>Submit pull request: With detailed description</li> </ol>"},{"location":"frontend_guide/#code-standards","title":"Code Standards","text":"<ul> <li>PEP 8: Python code formatting</li> <li>Type Hints: Use type annotations</li> <li>Documentation: Comprehensive docstrings</li> <li>Error Handling: Graceful error management</li> <li>Security: Secure API key handling</li> </ul> <p>\ud83c\udfa8 Ready to trade with style! The Streamlit frontend provides a professional, feature-rich interface for managing your IBKR portfolio with real-time data and inline trading capabilities. </p>"},{"location":"explanations/","title":"\ud83d\udca1 Explanations","text":"<p>Understanding-oriented documentation that explains the background, context, and architecture of the system.</p> <p>Explanations help you understand why things work the way they do. They provide the conceptual background needed to make informed decisions about how to use and extend the system.</p>"},{"location":"explanations/#available-explanations","title":"Available Explanations","text":""},{"location":"explanations/#system-architecture","title":"\ud83c\udfd7\ufe0f System Architecture","text":"<p>How the trading system works - Component overview and relationships - Data flow and communication patterns - Flask backend architecture - GitHub Actions integration design - Security and authentication model</p>"},{"location":"explanations/#security-model","title":"\ud83d\udd12 Security Model","text":"<p>Authentication and protection mechanisms - API key generation and validation - IBKR connection security - GitHub token management - Rate limiting and abuse prevention - Trading safeguards and controls</p>"},{"location":"explanations/#trading-workflows","title":"\ud83d\udcc8 Trading Workflows","text":"<p>How trades flow through the system - Order lifecycle and states - Portfolio management concepts - Market data integration - Error handling and recovery - Audit trails and logging</p>"},{"location":"explanations/#design-decisions","title":"\ud83d\udd27 Design Decisions","text":"<p>Why the system is built this way - Choice of Flask over alternatives - UV vs pip dependency management - CLI integration rationale - GitHub Actions over other CI/CD - Security-first architecture choices</p>"},{"location":"explanations/#key-concepts","title":"\ud83e\udde0 Key Concepts","text":""},{"location":"explanations/#trading-system-components","title":"Trading System Components","text":"<ul> <li>Flask Backend: REST API server handling trading operations</li> <li>IBKR Client: Connection to Interactive Brokers API</li> <li>GitHub Actions: Automated workflow execution</li> <li>CLI Tools: Command-line portfolio management</li> <li>Authentication Layer: API key and token security</li> </ul>"},{"location":"explanations/#data-flow","title":"Data Flow","text":"<pre><code>Frontend/Client \u2192 REST API \u2192 IBKR API \u2192 Trading System\n      \u2193              \u2193          \u2193           \u2193\nGitHub Actions \u2192 Flask Server \u2192 IBKR Client \u2192 Portfolio\n</code></pre>"},{"location":"explanations/#security-layers","title":"Security Layers","text":"<ol> <li>API Authentication: All endpoints require valid API keys</li> <li>Rate Limiting: Prevent abuse and protect IBKR API limits</li> <li>Trading Safeguards: Dry-run mode and position limits</li> <li>Audit Logging: Complete trail of all trading activities</li> </ol>"},{"location":"explanations/#why-this-matters","title":"\ud83e\udd14 Why This Matters","text":"<p>Understanding these concepts helps you:</p> <ul> <li>Make better decisions about how to configure and use the system</li> <li>Debug issues by understanding the underlying architecture</li> <li>Extend functionality in ways that align with the design</li> <li>Operate safely by understanding security implications</li> <li>Optimize performance by understanding bottlenecks and constraints</li> </ul>"},{"location":"explanations/#who-should-read-this","title":"\ud83c\udfaf Who Should Read This","text":"<ul> <li>System administrators configuring production deployments</li> <li>Developers extending or modifying the system</li> <li>Trading teams who need to understand the technical details</li> <li>Security teams reviewing the architecture and controls</li> <li>Anyone who wants to understand how it all fits together</li> </ul> <p>Start with System Architecture for the big picture \ud83c\udfd7\ufe0f </p>"},{"location":"how-to/","title":"\ud83d\udee0\ufe0f How-to Guides","text":"<p>Goal-oriented documentation that provides solutions for specific problems and tasks.</p> <p>How-to guides are recipes that help you solve real-world problems. They assume you have some familiarity with the system and want to accomplish specific goals.</p>"},{"location":"how-to/#available-guides","title":"Available Guides","text":""},{"location":"how-to/#github-actions-setup","title":"\u2699\ufe0f GitHub Actions Setup","text":"<p>Configure automated trading workflows - Set up repository dispatch triggers - Configure GitHub tokens and secrets - Test workflow integration - Debug common issues</p>"},{"location":"how-to/#ibkr-authentication-setup","title":"\ud83d\udd10 IBKR Authentication Setup","text":"<p>Connect to Interactive Brokers securely - Configure TWS/IB Gateway - Set up API permissions - Handle authentication tokens - Switch between paper and live trading</p>"},{"location":"how-to/#flask-cli-usage","title":"\ud83d\udcbb Flask CLI Usage","text":"<p>Manage trading operations via command line - Execute trading commands - View portfolio and positions - Manage orders and executions - Rebalance portfolios</p>"},{"location":"how-to/#advanced-configuration","title":"\ud83d\udd27 Advanced Configuration","text":"<p>Customize system behavior and settings - Environment variable configuration - Rate limiting and safety controls - Custom trading strategies - Performance optimization</p>"},{"location":"how-to/#quick-solutions","title":"\ud83c\udfaf Quick Solutions","text":""},{"location":"how-to/#common-tasks","title":"Common Tasks","text":"<ul> <li>Start the server: <code>uv run python run_server.py --port 8080</code></li> <li>Generate API key: <code>uv run python generate_test_api_key.py</code></li> <li>Test workflow trigger: <code>uv run python test_workflow_trigger.py</code></li> <li>View portfolio: <code>uv run flask --app backend.api:app portfolio view</code></li> </ul>"},{"location":"how-to/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Connection issues: Check IBKR Gateway is running and API is enabled</li> <li>Authentication errors: Verify API keys and GitHub tokens</li> <li>Import errors: Run <code>uv sync</code> to install dependencies</li> <li>Rate limiting: Check trading frequency and IBKR limits</li> </ul>"},{"location":"how-to/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<p>Most how-to guides assume you have:</p> <ul> <li>\u2705 Completed the Getting Started Tutorial</li> <li>\u2705 Basic understanding of REST APIs and trading concepts</li> <li>\u2705 Access to Interactive Brokers account (paper trading recommended)</li> <li>\u2705 GitHub repository with appropriate permissions</li> </ul>"},{"location":"how-to/#need-help","title":"\ud83c\udd98 Need Help?","text":"<p>If these guides don't solve your specific problem:</p> <ol> <li>Check the troubleshooting sections in each guide</li> <li>Review the System Architecture for deeper understanding</li> <li>Search existing GitHub Issues</li> <li>Open a new issue with detailed description of your problem</li> </ol> <p>Pick a guide based on what you want to accomplish \ud83c\udfaf </p>"},{"location":"how-to/flask-cli-usage/","title":"\ud83d\udee0\ufe0f Flask CLI Usage Guide","text":"<p>This guide shows you how to use the integrated Flask CLI commands for managing your trading operations.</p>"},{"location":"how-to/flask-cli-usage/#what-changed","title":"\ud83c\udd95 What Changed","text":""},{"location":"how-to/flask-cli-usage/#old-way-separate-scripts","title":"\u274c Old Way (Separate Scripts):","text":"<pre><code># Old separate scripts approach\npython scripts/rebalance_with_market.py --tickers AAPL TSLA\npython scripts/view_open_orders.py  \npython scripts/cancel_duplicates.py\n</code></pre>"},{"location":"how-to/flask-cli-usage/#new-way-flask-cli","title":"\u2705 New Way (Flask CLI):","text":"<pre><code># Modern Flask CLI approach  \nuv run flask trading rebalance --tickers AAPL TSLA --dry-run\nuv run flask orders view\nuv run flask orders cancel-duplicates --dry-run\nuv run flask portfolio export --format csv\n</code></pre>"},{"location":"how-to/flask-cli-usage/#available-commands","title":"\ud83d\udccb Available Commands","text":""},{"location":"how-to/flask-cli-usage/#1-trading-commands","title":"1. Trading Commands","text":"<pre><code># Rebalance portfolio (sell percentage of stocks)\nuv run flask trading rebalance --tickers AAPL TSLA MSFT --percentage 25 --dry-run\n\n# Options:\n--tickers, -t        Stock tickers (required, multiple)\n--percentage, -p     Percentage to sell (default: 25%)  \n--order-type, -o     market or limit (default: market)\n--dry-run, -d        Preview only, don't execute\n</code></pre>"},{"location":"how-to/flask-cli-usage/#2-order-management","title":"2. Order Management","text":"<pre><code># View live orders with rich formatting\nuv run flask orders view --sort-by ticker\n\n# Cancel duplicate orders  \nuv run flask orders cancel-duplicates --dry-run\n\n# Options:\n--refresh, -r        Auto-refresh interval (default: 5s)\n--sort-by, -s        Sort by: ticker, side, quantity, price\n--dry-run, -d        Preview duplicates without cancelling\n</code></pre>"},{"location":"how-to/flask-cli-usage/#3-portfolio-analysis","title":"3. Portfolio Analysis","text":"<pre><code># Export portfolio in different formats\nuv run flask portfolio export --format table\nuv run flask portfolio export --format json --output portfolio.json\nuv run flask portfolio export --format csv --output portfolio.csv\n\n# Options:\n--format, -f         Output format: table, json, csv\n--output, -o         Output file (default: stdout)\n</code></pre>"},{"location":"how-to/flask-cli-usage/#common-usage-examples","title":"\ud83c\udfaf Common Usage Examples","text":""},{"location":"how-to/flask-cli-usage/#dry-run-portfolio-rebalancing","title":"Dry Run Portfolio Rebalancing","text":"<pre><code># Preview what trades would be executed\nuv run flask trading rebalance --tickers AAPL TSLA MSFT --percentage 30 --dry-run\n</code></pre>"},{"location":"how-to/flask-cli-usage/#live-trading-careful","title":"Live Trading (Careful!)","text":"<pre><code># Execute actual trades (remove --dry-run)\nuv run flask trading rebalance --tickers AAPL --percentage 10\n</code></pre>"},{"location":"how-to/flask-cli-usage/#monitor-orders","title":"Monitor Orders","text":"<pre><code># View current orders sorted by ticker\nuv run flask orders view --sort-by ticker\n\n# Auto-refresh every 3 seconds\nuv run flask orders view --refresh 3\n</code></pre>"},{"location":"how-to/flask-cli-usage/#export-portfolio-data","title":"Export Portfolio Data","text":"<pre><code># Quick table view\nuv run flask portfolio export\n\n# Export to CSV for analysis\nuv run flask portfolio export --format csv --output ~/portfolio_$(date +%Y%m%d).csv\n\n# Export JSON for programmatic use  \nuv run flask portfolio export --format json --output portfolio.json\n</code></pre>"},{"location":"how-to/flask-cli-usage/#setup-requirements","title":"\ud83d\udd27 Setup Requirements","text":""},{"location":"how-to/flask-cli-usage/#1-install-dependencies","title":"1. Install Dependencies","text":"<pre><code>uv sync  # Installs all requirements including rich and click\n</code></pre>"},{"location":"how-to/flask-cli-usage/#2-set-flask-app-environment","title":"2. Set Flask App Environment","text":"<pre><code>export FLASK_APP=backend.api:app\n# Or add to your ~/.zshrc or ~/.bashrc\n</code></pre>"},{"location":"how-to/flask-cli-usage/#3-verify-installation","title":"3. Verify Installation","text":"<pre><code># Check available commands\nuv run flask --help\n\n# Check trading commands\nuv run flask trading --help\n</code></pre>"},{"location":"how-to/flask-cli-usage/#features","title":"\ud83c\udfa8 Features","text":""},{"location":"how-to/flask-cli-usage/#rich-terminal-output","title":"Rich Terminal Output","text":"<ul> <li>\u2705 Colored tables and progress bars</li> <li>\u2705 Interactive confirmations</li> <li>\u2705 Real-time progress indicators</li> <li>\u2705 Professional formatting</li> </ul>"},{"location":"how-to/flask-cli-usage/#safety-features","title":"Safety Features","text":"<ul> <li>\u2705 <code>--dry-run</code> mode for all trading commands</li> <li>\u2705 Interactive confirmations for live trades</li> <li>\u2705 Input validation and error handling</li> <li>\u2705 Rate limiting for API calls</li> </ul>"},{"location":"how-to/flask-cli-usage/#integration-benefits","title":"Integration Benefits","text":"<ul> <li>\u2705 Shares Flask app configuration</li> <li>\u2705 Same IBKR client connection</li> <li>\u2705 Consistent error handling</li> <li>\u2705 No duplicate API authentication</li> </ul>"},{"location":"how-to/flask-cli-usage/#migration-guide","title":"\ud83c\udd9a Migration Guide","text":""},{"location":"how-to/flask-cli-usage/#script-cli-command-mapping","title":"Script \u2192 CLI Command Mapping","text":"Old Script New CLI Command <code>scripts/rebalance_with_market.py</code> <code>uv run flask trading rebalance --order-type market</code> <code>scripts/rebalance_with_limit.py</code> <code>uv run flask trading rebalance --order-type limit</code> <code>scripts/view_open_orders.py</code> <code>uv run flask orders view</code> <code>scripts/cancel_duplicates.py</code> <code>uv run flask orders cancel-duplicates</code>"},{"location":"how-to/flask-cli-usage/#parameter-changes","title":"Parameter Changes","text":"Old Script Parameter New CLI Parameter <code>--tickers AAPL TSLA</code> <code>--tickers AAPL TSLA</code> <code>--dry_run</code> <code>--dry-run</code> No equivalent <code>--percentage 25</code> No equivalent <code>--order-type market</code>"},{"location":"how-to/flask-cli-usage/#important-notes","title":"\ud83d\udea8 Important Notes","text":""},{"location":"how-to/flask-cli-usage/#environment-setup","title":"Environment Setup","text":"<p>Make sure your Flask environment is properly configured: - \u2705 IBKR OAuth files in place - \u2705 GitHub token configured (if using workflow triggers) - \u2705 All dependencies installed via UV</p>"},{"location":"how-to/flask-cli-usage/#safety-first","title":"Safety First","text":"<ul> <li>\ud83d\udd25 Always use <code>--dry-run</code> first to preview trades</li> <li>\ud83d\udd25 Double-check tickers before executing</li> <li>\ud83d\udd25 Start with small percentages for testing</li> </ul>"},{"location":"how-to/flask-cli-usage/#performance","title":"Performance","text":"<ul> <li>\u26a1 CLI commands share Flask app context (faster)</li> <li>\u26a1 No HTTP overhead (direct function calls)</li> <li>\u26a1 Reuses existing IBKR connection</li> </ul>"},{"location":"how-to/flask-cli-usage/#advanced-usage","title":"\ud83c\udfaa Advanced Usage","text":""},{"location":"how-to/flask-cli-usage/#combining-commands","title":"Combining Commands","text":"<pre><code># Check portfolio, then rebalance\nuv run flask portfolio export --format table\nuv run flask trading rebalance --tickers AAPL TSLA --percentage 15 --dry-run\n\n# Clean up orders after trading\nuv run flask orders view\nuv run flask orders cancel-duplicates --dry-run\n</code></pre>"},{"location":"how-to/flask-cli-usage/#scripting-and-automation","title":"Scripting and Automation","text":"<pre><code>#!/bin/bash\n# Daily portfolio management script\n\necho \"\ud83d\udcca Current Portfolio:\"\nuv run flask portfolio export --format table\n\necho -e \"\\n\ud83d\udd04 Rebalancing Top Positions:\"\nuv run flask trading rebalance --tickers AAPL MSFT GOOGL --percentage 5 --dry-run\n\necho -e \"\\n\ud83d\udccb Current Orders:\"\nuv run flask orders view\n</code></pre>"},{"location":"how-to/flask-cli-usage/#troubleshooting","title":"\ud83c\udd98 Troubleshooting","text":""},{"location":"how-to/flask-cli-usage/#command-not-found","title":"Command Not Found","text":"<pre><code># Make sure Flask app is set\nexport FLASK_APP=backend.api:app\n\n# Verify with\nuv run flask --help\n</code></pre>"},{"location":"how-to/flask-cli-usage/#ibkr-connection-issues","title":"IBKR Connection Issues","text":"<pre><code># Test Flask server first\nuv run python run_server.py --port 8080\n\n# Then try CLI commands\nuv run flask trading --help\n</code></pre>"},{"location":"how-to/flask-cli-usage/#rich-formatting-issues","title":"Rich Formatting Issues","text":"<pre><code># Install rich if missing\nuv add rich\n\n# Test with simple command\nuv run flask portfolio export --format table\n</code></pre>"},{"location":"how-to/flask-cli-usage/#ready-to-trade","title":"\ud83c\udf89 Ready to Trade!","text":"<p>You now have a powerful, integrated CLI system that's: - \u2705 Faster and more reliable than separate scripts - \u2705 Uses modern Flask CLI patterns (2025 standards) - \u2705 Provides rich terminal output - \u2705 Includes comprehensive safety features</p> <p>Start with dry runs, then graduate to live trading when you're confident!</p> <pre><code># Your first command:\nuv run flask portfolio export\n</code></pre>"},{"location":"how-to/github-actions-setup/","title":"\ud83d\udd10 Secure GitHub Workflow Integration Setup","text":"<p>This guide walks you through setting up secure frontend-to-GitHub workflow communication using a Flask backend proxy.</p>"},{"location":"how-to/github-actions-setup/#architecture-overview","title":"\ud83c\udfaf Architecture Overview","text":"<pre><code>Frontend (Astro) \u2192 Flask API (/trigger-workflow) \u2192 GitHub API \u2192 Triggers Workflow\n</code></pre>"},{"location":"how-to/github-actions-setup/#setup-steps","title":"\u2699\ufe0f Setup Steps","text":""},{"location":"how-to/github-actions-setup/#1-create-github-personal-access-token","title":"1. Create GitHub Personal Access Token","text":"<ol> <li>Go to GitHub \u2192 Settings \u2192 Developer settings \u2192 Personal access tokens \u2192 Fine-grained tokens</li> <li>Click \"Generate new token\"</li> <li>Configure:</li> <li>Repository access: Only select repositories \u2192 Choose <code>ibkr-ibind-rest-api</code></li> <li>Permissions:<ul> <li>Actions: Write (to trigger workflows)</li> <li>Contents: Read (basic repo access)</li> <li>Metadata: Read (required)</li> </ul> </li> <li>Copy the token - you won't be able to see it again!</li> </ol>"},{"location":"how-to/github-actions-setup/#2-configure-github-token","title":"2. Configure GitHub Token","text":"<p>Option A: Using config.json (Recommended) <pre><code># Edit config.json and replace YOUR_GITHUB_TOKEN_HERE with your actual token\nnano config.json\n</code></pre></p> <p>Option B: Using Environment Variables <pre><code>export GITHUB_TOKEN=\"your_github_token_here\"\nexport GITHUB_REPO_OWNER=\"parthchandak02\"\nexport GITHUB_REPO_NAME=\"ibkr-ibind-rest-api\"\n</code></pre></p>"},{"location":"how-to/github-actions-setup/#3-test-the-backend-endpoint","title":"3. Test the Backend Endpoint","text":"<pre><code># 1. Install dependencies (first time only)\nuv sync\n\n# 2. Start your Flask server\nuv run python run_server.py --port 8080\n\n# 3. Run the test (in another terminal)\nuv run python test_workflow_trigger.py\n</code></pre> <p>Expected Success Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Workflow triggered successfully\",\n  \"workflow_params\": {\n    \"symbol\": \"AAPL\",\n    \"action\": \"BUY\",\n    \"quantity\": 1,\n    \"limit_price\": 150.0\n  },\n  \"triggered_at\": \"2025-01-27T...\"\n}\n</code></pre></p>"},{"location":"how-to/github-actions-setup/#4-test-with-curl-alternative","title":"4. Test with curl (Alternative)","text":"<pre><code>curl -X POST http://localhost:8080/trigger-workflow \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-API-Key: YOUR_API_KEY\" \\\n  -d '{\n    \"symbol\": \"AAPL\",\n    \"action\": \"BUY\",\n    \"quantity\": 1,\n    \"limit_price\": 150.00\n  }'\n</code></pre>"},{"location":"how-to/github-actions-setup/#security-features","title":"\ud83d\udd12 Security Features","text":"<p>\u2705 API Key Authentication - Frontend must provide valid API key \u2705 Input Validation - All parameters validated and sanitized \u2705 Rate Limiting - Built-in Flask-Limiter protection \u2705 Secure Token Storage - GitHub token never exposed to frontend \u2705 Error Handling - Comprehensive error logging and responses \u2705 CORS Protection - Controlled cross-origin access  </p>"},{"location":"how-to/github-actions-setup/#endpoint-details","title":"\ud83d\udccb Endpoint Details","text":"<p>URL: <code>POST /trigger-workflow</code></p> <p>Headers: <pre><code>Content-Type: application/json\nX-API-Key: your-api-key\n</code></pre></p> <p>Request Body: <pre><code>{\n  \"symbol\": \"AAPL\",          // Stock symbol (required)\n  \"action\": \"BUY\",           // BUY or SELL (required)  \n  \"quantity\": 1,             // Number of shares (required)\n  \"limit_price\": 150.00      // Limit price (required)\n}\n</code></pre></p> <p>Success Response (200): <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Workflow triggered successfully\",\n  \"workflow_params\": { ... },\n  \"triggered_at\": \"2025-01-27T...\"\n}\n</code></pre></p> <p>Error Responses: - <code>400</code> - Invalid request data - <code>401</code> - Missing/invalid API key - <code>500</code> - GitHub token not configured - <code>502</code> - GitHub API error</p>"},{"location":"how-to/github-actions-setup/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":"<p>\"GitHub integration not configured\" - Check your GitHub token in config.json or environment variables - Ensure token has correct permissions</p> <p>\"Request signatures didn't match!\" - Verify your API key is correct - Check that you're sending X-API-Key header</p> <p>Network error communicating with GitHub - Check internet connection - Verify GitHub is accessible (not blocked by firewall)</p> <p>GitHub API error 403/404 - Token might not have sufficient permissions - Verify repository name is correct - Check if token has expired</p>"},{"location":"how-to/github-actions-setup/#next-steps","title":"\ud83d\ude80 Next Steps","text":"<p>After testing the backend endpoint: 1. \u2705 Create frontend interface to call the endpoint 2. \u2705 Add environment-based approval workflows 3. \u2705 Set up production deployment 4. \u2705 Add monitoring and logging </p>"},{"location":"reference/","title":"\ud83d\udcd6 Reference","text":"<p>Information-oriented documentation providing technical specifications, API details, and comprehensive references.</p> <p>Reference materials are designed for lookup and provide exhaustive details about the system's capabilities, APIs, configuration options, and commands.</p>"},{"location":"reference/#available-references","title":"Available References","text":""},{"location":"reference/#api-endpoints","title":"\ud83d\udd0c API Endpoints","text":"<p>Complete REST API documentation - Endpoint specifications and parameters - Request/response examples - Authentication requirements - Error codes and handling - Rate limiting details</p>"},{"location":"reference/#cli-commands","title":"\u2328\ufe0f CLI Commands","text":"<p>All available Flask CLI commands - Trading operations commands - Portfolio management commands - Order management commands - System administration commands - Command options and examples</p>"},{"location":"reference/#configuration-options","title":"\u2699\ufe0f Configuration Options","text":"<p>Environment variables and settings - Required environment variables - Optional configuration parameters - Security settings - Performance tuning options - IBKR connection settings</p>"},{"location":"reference/#uv-dependency-management","title":"\ud83d\udce6 UV Dependency Management","text":"<p>Package management with UV - UV installation and setup - Dependency management workflows - Lock file management - Development vs production dependencies</p>"},{"location":"reference/#quick-reference","title":"\ud83d\udd0d Quick Reference","text":""},{"location":"reference/#api-authentication","title":"API Authentication","text":"<pre><code># All API calls require this header\nX-API-Key: your-api-key-here\n</code></pre>"},{"location":"reference/#common-commands","title":"Common Commands","text":"<pre><code># Server management\nuv run python run_server.py --port 8080\n\n# CLI operations\nuv run flask --app backend.api:app portfolio view\nuv run flask --app backend.api:app orders view\nuv run flask --app backend.api:app trading execute --help\n\n# Testing\nuv run python test_workflow_trigger.py\nuv run python generate_test_api_key.py\n</code></pre>"},{"location":"reference/#environment-variables","title":"Environment Variables","text":"<pre><code># Required for GitHub Actions\nGITHUB_TOKEN=your_github_token\n\n# Optional IBKR settings\nIBKR_GATEWAY_URL=localhost:5000\nIBKR_ACCOUNT_ID=your_account_id\n</code></pre>"},{"location":"reference/#api-overview","title":"\ud83d\udccb API Overview","text":""},{"location":"reference/#core-endpoints","title":"Core Endpoints","text":"Endpoint Method Purpose <code>/health</code> GET System health check <code>/trigger-workflow</code> POST Trigger GitHub Actions <code>/account</code> GET Account information <code>/portfolio</code> GET Portfolio positions <code>/orders</code> GET/POST Order management <code>/market-data</code> GET Market data quotes"},{"location":"reference/#authentication","title":"Authentication","text":"<p>All endpoints require <code>X-API-Key</code> header with a valid API key generated using: <pre><code>uv run python generate_test_api_key.py\n</code></pre></p>"},{"location":"reference/#usage-patterns","title":"\ud83c\udfaf Usage Patterns","text":""},{"location":"reference/#for-developers","title":"For Developers","text":"<ul> <li>Use API Endpoints for integration details</li> <li>Refer to CLI Commands for automation</li> <li>Check Configuration for deployment settings</li> </ul>"},{"location":"reference/#for-system-administrators","title":"For System Administrators","text":"<ul> <li>Review Configuration Options for security</li> <li>Understand UV Dependency Management for deployments</li> <li>Use CLI Commands for operational tasks</li> </ul>"},{"location":"reference/#for-traders","title":"For Traders","text":"<ul> <li>Focus on trading-related endpoints in API Endpoints</li> <li>Learn portfolio commands in CLI Commands</li> <li>Understand configuration in Configuration</li> </ul> <p>Looking for something specific? Use the search or browse by category \ud83d\udd0d </p>"},{"location":"reference/uv-dependency-management/","title":"\ud83d\ude80 UV Setup Guide","text":"<p>This project uses UV - a fast Python package manager and project manager.</p>"},{"location":"reference/uv-dependency-management/#requirements-files","title":"\ud83d\udce6 Requirements Files","text":"<ul> <li><code>requirements.txt</code> - Core backend dependencies + optional components (commented out)</li> <li><code>requirements-minimal.txt</code> - Minimal dependencies for GitHub Actions only</li> </ul>"},{"location":"reference/uv-dependency-management/#development-setup","title":"\ud83d\udee0\ufe0f Development Setup","text":"<pre><code># 1. Install dependencies\nuv sync\n\n# 2. Run any Python script\nuv run python script_name.py\n\n# 3. Start the server\nuv run python run_server.py --port 8080\n</code></pre>"},{"location":"reference/uv-dependency-management/#benefits-of-uv","title":"\u2728 Benefits of UV","text":"<ul> <li>Fast: 10-100x faster than pip</li> <li>Reliable: Deterministic dependency resolution</li> <li>Simple: No need for virtual environment management</li> <li>Compatible: Works with existing Python projects</li> </ul>"},{"location":"reference/uv-dependency-management/#what-we-removed","title":"\ud83d\udeab What We Removed","text":"<ul> <li>All <code>pip</code> references</li> <li><code>pyproject.toml</code> (was causing build issues)</li> <li>Python cache files</li> <li>Redundant <code>main.py</code></li> </ul>"},{"location":"reference/uv-dependency-management/#usage-examples","title":"\ud83d\udccb Usage Examples","text":"<pre><code># Verify GitHub token\nuv run python verify_github_token.py\n\n# Test workflow trigger\nuv run python test_workflow_trigger.py\n\n# Generate API key\nuv run python generate_test_api_key.py\n\n# View orders\nuv run python scripts/view_open_orders.py\n\n# Rebalance portfolio\nuv run python scripts/rebalance_with_market.py --tickers AAPL TSLA\n</code></pre>"},{"location":"tutorials/","title":"\ud83c\udf93 Tutorials","text":"<p>Learning-oriented documentation that takes you by the hand through a series of steps to complete real projects.</p> <p>Tutorials are designed for beginners and help you get familiar with the IBKR trading system. They provide practical, step-by-step guidance to help you achieve specific learning outcomes.</p>"},{"location":"tutorials/#available-tutorials","title":"Available Tutorials","text":""},{"location":"tutorials/#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>Learn to set up your first IBKR trading server - Install dependencies with UV - Configure IBKR connection - Test basic functionality - Set up GitHub Actions integration</p> <p>Time: ~15 minutes | Level: Beginner</p>"},{"location":"tutorials/#first-trade-execution","title":"\ud83d\udcb0 First Trade Execution","text":"<p>Execute your first automated trade via GitHub Actions - Understand paper trading setup - Configure trading parameters - Trigger trades via REST API - Monitor execution and results</p> <p>Time: ~20 minutes | Level: Beginner</p>"},{"location":"tutorials/#learning-path","title":"\ud83d\udcda Learning Path","text":"<p>If you're new to the system, we recommend following this path:</p> <ol> <li>Start here: Getting Started - Set up your development environment</li> <li>Next: First Trade Execution - Learn the trading workflow</li> <li>Then explore: How-to Guides - Solve specific problems</li> <li>Deep dive: Explanations - Understand the system architecture</li> </ol>"},{"location":"tutorials/#what-youll-learn","title":"\ud83c\udfaf What You'll Learn","text":"<p>By completing these tutorials, you'll understand:</p> <ul> <li>How to set up and configure the IBKR trading server</li> <li>How to authenticate and secure your trading operations</li> <li>How to execute trades programmatically via REST API</li> <li>How to integrate with GitHub Actions for automation</li> <li>How to manage portfolios using command-line tools</li> </ul>"},{"location":"tutorials/#safety-first","title":"\ud83d\udea8 Safety First","text":"<p>Important: Use Paper Trading</p> <p>All tutorials use paper trading by default. Never risk real money while learning the system. Only switch to live trading after you fully understand the workflows and security implications.</p> <p>Ready to start? Begin with Getting Started \ud83d\ude80 </p>"},{"location":"tutorials/getting-started/","title":"\ud83d\ude80 Getting Started Tutorial","text":"<p>Learn how to set up and run your IBKR trading server from scratch.</p>"},{"location":"tutorials/getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.13+ with UV installed</li> <li>Interactive Brokers account (paper trading recommended for testing)</li> <li>GitHub account with repository access</li> <li>Basic understanding of REST APIs and trading concepts</li> </ul>"},{"location":"tutorials/getting-started/#step-1-environment-setup","title":"Step 1: Environment Setup","text":""},{"location":"tutorials/getting-started/#install-uv-if-not-already-installed","title":"Install UV (if not already installed)","text":"<pre><code># On macOS/Linux\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# On Windows (PowerShell)\npowershell -c \"irm https://astral.sh/uv/install.sh | iex\"\n</code></pre>"},{"location":"tutorials/getting-started/#clone-the-repository","title":"Clone the Repository","text":"<pre><code>git clone https://github.com/parthchandak02/ibkr-ibind-rest-api.git\ncd ibkr-ibind-rest-api\n</code></pre>"},{"location":"tutorials/getting-started/#install-dependencies","title":"Install Dependencies","text":"<pre><code># Install all dependencies using UV\nuv sync\n\n# This replaces the old pip install -r requirements.txt approach\n# UV reads from pyproject.toml and creates a uv.lock file\n</code></pre>"},{"location":"tutorials/getting-started/#step-2-configure-ibkr-connection","title":"Step 2: Configure IBKR Connection","text":""},{"location":"tutorials/getting-started/#set-up-your-trading-account","title":"Set Up Your Trading Account","text":"<ol> <li>Open Interactive Brokers account (if you don't have one)</li> <li>Enable API access in your account settings</li> <li>Download IB Gateway or TWS (Trader Workstation)</li> <li>Configure paper trading for safe testing</li> </ol>"},{"location":"tutorials/getting-started/#test-ibkr-connection","title":"Test IBKR Connection","text":"<pre><code># Start the server (it will auto-connect to IBKR)\nuv run python run_server.py --port 8080\n</code></pre> <p>Expected output: <pre><code>\u2705 IBKR Client initialized successfully\n\u2705 Connected to account: U14716312 (Paper)\n\u2705 Server running on http://localhost:8080\n</code></pre></p>"},{"location":"tutorials/getting-started/#step-3-test-basic-functionality","title":"Step 3: Test Basic Functionality","text":""},{"location":"tutorials/getting-started/#generate-an-api-key","title":"Generate an API Key","text":"<pre><code># Generate a test API key for authentication\nuv run python generate_test_api_key.py\n</code></pre> <p>Output: <pre><code>\u2705 Generated API key for testing: YOUR_API_KEY_PLACEHOLDER\n\ud83d\udcdd Use this in your test scripts with header: X-API-Key: [key]\n</code></pre></p>"},{"location":"tutorials/getting-started/#test-the-health-endpoint","title":"Test the Health Endpoint","text":"<pre><code># Test server health (requires API key)\ncurl -H \"X-API-Key: YOUR_API_KEY_HERE\" http://localhost:8080/health\n</code></pre> <p>Expected response: <pre><code>{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2025-01-28T03:19:43.250404\",\n  \"ibkr_connected\": true,\n  \"account_id\": \"U14716312\"\n}\n</code></pre></p>"},{"location":"tutorials/getting-started/#step-4-set-up-github-actions","title":"Step 4: Set Up GitHub Actions","text":""},{"location":"tutorials/getting-started/#configure-github-token","title":"Configure GitHub Token","text":"<ol> <li>Go to GitHub Settings \u2192 Developer settings \u2192 Personal access tokens</li> <li>Generate new token with <code>repo</code> and <code>actions</code> permissions</li> <li>Add to repository secrets as <code>GITHUB_TOKEN</code></li> </ol>"},{"location":"tutorials/getting-started/#test-workflow-trigger","title":"Test Workflow Trigger","text":"<pre><code># Update the test script with your API key\n# Edit test_workflow_trigger.py and replace REPLACE_WITH_YOUR_API_KEY\n\n# Run the workflow trigger test\nuv run python test_workflow_trigger.py\n</code></pre> <p>Expected output: <pre><code>{\n  \"message\": \"Workflow triggered successfully\",\n  \"status\": \"success\",\n  \"triggered_at\": \"2025-01-28T03:19:43.250404\",\n  \"workflow_params\": {\n    \"action\": \"BUY\",\n    \"limit_price\": 150.0,\n    \"quantity\": 1,\n    \"symbol\": \"AAPL\"\n  }\n}\n</code></pre></p>"},{"location":"tutorials/getting-started/#step-5-verify-end-to-end-flow","title":"Step 5: Verify End-to-End Flow","text":""},{"location":"tutorials/getting-started/#check-github-actions","title":"Check GitHub Actions","text":"<ol> <li>Go to your repository on GitHub</li> <li>Click the \"Actions\" tab</li> <li>Look for the triggered workflow - you should see \"Trading Trigger - AAPL Test Order\"</li> <li>Verify the workflow ran successfully</li> </ol>"},{"location":"tutorials/getting-started/#test-portfolio-management","title":"Test Portfolio Management","text":"<pre><code># View your current portfolio\nuv run flask --app backend.api:app portfolio view\n\n# Check open orders\nuv run flask --app backend.api:app orders view\n\n# Test a small market order (paper trading!)\nuv run flask --app backend.api:app trading execute --symbol AAPL --action BUY --quantity 1 --dry-run\n</code></pre>"},{"location":"tutorials/getting-started/#congratulations","title":"\ud83c\udf89 Congratulations!","text":"<p>You now have a fully functional IBKR trading server with GitHub Actions integration!</p>"},{"location":"tutorials/getting-started/#what-youve-accomplished","title":"What You've Accomplished","text":"<p>\u2705 Server Setup: Flask server running with IBKR connection \u2705 API Authentication: Working API key system \u2705 GitHub Integration: Workflow triggers via REST API \u2705 Trading Commands: Flask CLI for portfolio management \u2705 End-to-End Testing: Complete workflow verification  </p>"},{"location":"tutorials/getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Learn more commands: Check out Flask CLI Usage</li> <li>Understand the architecture: Read System Architecture </li> <li>Execute your first real trade: Follow First Trade Execution</li> <li>Explore the API: See API Endpoints Reference</li> </ul>"},{"location":"tutorials/getting-started/#troubleshooting","title":"\ud83c\udd98 Troubleshooting","text":"<p>Server won't start? - Check if IBKR Gateway/TWS is running - Verify API permissions in your IB account - Check port 8080 isn't already in use</p> <p>Workflow trigger failing? - Verify GitHub token has correct permissions - Check API key is valid and not expired - Ensure repository_dispatch event is configured</p> <p>Import errors? - Run <code>uv sync</code> to ensure all dependencies are installed - Make sure you're using UV, not pip - Check you're in the correct directory</p> <p>Need more help? Check our How-to Guides or open an issue! </p>"}]}